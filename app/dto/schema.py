# app/dto/schemas.py
from typing import Optional, Dict, Any, List
from pydantic import BaseModel, Field
from datetime import datetime, date


class ImageAnalysisRequest(BaseModel):
    """Request model for image analysis"""
    prompt: Optional[str] = Field(
        default="Analyze this image and describe what you see in detail.",
        description="Custom prompt for image analysis"
    )

class ImageAnalysisResponse(BaseModel):
    """Response model for image analysis"""
    analysis: str = Field(description="AI-generated image analysis")
    model_used: str = Field(description="AI model used for analysis")
    image_size: Optional[str] = Field(default=None, description="Size of uploaded image")
    processing_time: Optional[float] = Field(default=None, description="Processing time in seconds")

class HealthCheckResponse(BaseModel):
    """Health check response model"""
    status: str = Field(description="Service status")
    service: str = Field(description="Service name")
    version: str = Field(description="Service version")

class ErrorResponse(BaseModel):
    """Error response model"""
    error: str = Field(description="Error message")
    detail: Optional[str] = Field(default=None, description="Detailed error information")
    error_code: Optional[str] = Field(default=None, description="Error code")


class UserBase(BaseModel):
    username: str
    email: str
    is_active: bool = True

class UserCreate(UserBase):
    pass

class User(UserBase):
    id: int
    created_at: datetime

    class Config:
        from_attributes = True

class ItemBase(BaseModel):
    title: str
    description: Optional[str] = None


class ItemCreate(ItemBase):
    owner_id: int

class Item(ItemBase):
    id: int
    owner_id: int
    created_at: datetime

    class Config:
        from_attributes = True


class ProductBase(BaseModel):
    name: str
    description: Optional[str] = None
    image: Optional[str] = None


class ProductCreate(ProductBase):
    pass


class ProductUpdate(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    image: Optional[str] = None


class Product(ProductBase):
    id: int
    created_at: datetime
    updated_at: Optional[datetime] = None

    class Config:
        from_attributes = True


# Marketing Campaign schemas
class MarketingCampaignBase(BaseModel):
    product_id: int
    name: str
    status: str = "draft"
    secondary_product_ids: Optional[List[int]] = None
    start_date: Optional[date] = None
    end_date: Optional[date] = None


class MarketingCampaignCreate(MarketingCampaignBase):
    pass


class MarketingCampaignUpdate(BaseModel):
    name: Optional[str] = None
    status: Optional[str] = None
    secondary_product_ids: Optional[List[int]] = None
    start_date: Optional[date] = None
    end_date: Optional[date] = None


class MarketingCampaign(MarketingCampaignBase):
    id: int
    created_at: datetime
    updated_at: Optional[datetime] = None

    class Config:
        from_attributes = True


# Marketing Campaign Target schemas
class MarketingCampaignTargetBase(BaseModel):
    marketing_campaign_id: Optional[int] = None
    region: str
    target_audience_ages: List[str]
    target_audience_genders: List[str]


class MarketingCampaignTargetCreate(MarketingCampaignTargetBase):
    pass


class MarketingCampaignTarget(MarketingCampaignTargetBase):
    id: int
    created_at: datetime

    class Config:
        from_attributes = True

class MarketingCampaignTargetUpdate(BaseModel):
    marketing_campaign_id: Optional[int] = None
    region: str
    target_audience_ages: List[str]
    target_audience_genders: List[str]

#TODO: Content that was generated by AI and selected by user to be part of campaign, add reference to ai response
class MarketingCampaignContentItemBase(BaseModel):
    marketing_campaign_id: int
    content_type: str
    text: Optional[str] = None
    content_url: Optional[str] = None
    category: Optional[str] = None


class MarketingCampaignContentItemCreate(MarketingCampaignContentItemBase):
    pass


class MarketingCampaignContentItemUpdate(BaseModel):
    content_type: Optional[str] = None
    text: Optional[str] = None
    content_url: Optional[str] = None
    category: Optional[str] = None

class MarketingCampaignContentItem(MarketingCampaignContentItemBase):
    id: int
    created_at: datetime
    updated_at: Optional[datetime] = None

    class Config:
        from_attributes = True


class MarketingCampaignWithDetails(MarketingCampaign):
    targets: List[MarketingCampaignTarget] = []
    content_items: List[MarketingCampaignContentItem] = []
    product: Optional[Product] = None


class ProductWithCampaigns(Product):
    marketing_campaigns: List[MarketingCampaign] = []